<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>huihui202411&#39;s blog</title>
  
  <subtitle>学习应该像呼吸一样自然</subtitle>
  <link href="https://huihui202411.github.io/atom.xml" rel="self"/>
  
  <link href="https://huihui202411.github.io/"/>
  <updated>2025-02-10T16:30:46.178Z</updated>
  <id>https://huihui202411.github.io/</id>
  
  <author>
    <name>huihui202411</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue基础知识</title>
    <link href="https://huihui202411.github.io/2025/01/22/Vue3/Vue3-1/"/>
    <id>https://huihui202411.github.io/2025/01/22/Vue3/Vue3-1/</id>
    <published>2025-01-22T06:44:00.000Z</published>
    <updated>2025-02-10T16:30:46.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识vue"><a href="#初识vue" class="headerlink" title="初识vue"></a>初识vue</h1><h2 id="创建vue3项目"><a href="#创建vue3项目" class="headerlink" title="创建vue3项目"></a>创建vue3项目</h2><span id="more"></span><h3 id="手动创建项目的命令"><a href="#手动创建项目的命令" class="headerlink" title="手动创建项目的命令"></a>手动创建项目的命令</h3><p>使用npm或者yarn包管理工具都可以搭配vite手动创建项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#使用npm create命令创建项目</span><br><span class="line">npm create vite@latest</span><br><span class="line">#使用yarn create命令创建项目</span><br><span class="line">yarn create vite</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><img src="/2025/01/22/Vue3/Vue3-1/1.png" class=""><p>创建之后可以在终端输入yarn安装项目的全部依赖</p><p>安装完之后输入 <font color="red">yarn dev </font>启动本地服务器</p><h3 id="通过模板自动创建项目"><a href="#通过模板自动创建项目" class="headerlink" title="通过模板自动创建项目"></a>通过模板自动创建项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#使用npm6或更低版本创建项目</span><br><span class="line">npm create vite@latest &lt;项目名称&gt; --template &lt;模板名称&gt;</span><br><span class="line">#使用npm7或更高版本创建项目</span><br><span class="line">npm create vite@latest &lt;项目名称&gt; -- --template &lt;模板名称&gt;</span><br><span class="line">#使用yarn create命令创建项目</span><br><span class="line">yarn create vite &lt;项目名称&gt; --template &lt;模板名称&gt;</span><br></pre></td></tr></table></figure><p><strong>示例</strong> </p><img src="/2025/01/22/Vue3/Vue3-1/2.png" class="" title="img"><h2 id="vue3目录结构"><a href="#vue3目录结构" class="headerlink" title="vue3目录结构"></a>vue3目录结构</h2><img src="/2025/01/22/Vue3/Vue3-1/mulu.png" class=""><p><strong>.vscode</strong> : 存放vscode编辑器的相关配置</p><p><strong>node_modules</strong>:存放通过npm或yarn安装的所有依赖包和插件</p><p><strong>public</strong>：存放的不可编译的静态资源文件，如图像、字体文件、favicon.ico等，使用绝对路径进行访问</p><p><strong>src</strong>：存放的开发者编写的源代码，，通常包括组件、样式、逻辑、API等</p><p><strong>assets</strong>：存放的可编译的静态资源文件，如图像、样式表、JavaScript文件等，使用相对路径进行访问</p><p><strong>components</strong>:存放单文件组件</p><p><strong>App.vue</strong>：项目的根组件，也是 Vue组件的入口文件，通常包含整个应用的主要框架结构</p><p><strong>main.js</strong>:项目的入口文件，通常会在这里创建Vue实例，并挂载到DOM上</p><p><strong>style.css</strong>:项目的全局样式文件</p><p>.<strong>gitignore</strong>:向git上传代码时需要忽略的文件列表</p><p><strong>index.html</strong>:默认的主渲染文件，项目的HTML模板，通常在这里包含项目的主要静态元素，并在<code>&lt;body&gt;</code>中挂载Vue应用</p><p><strong>package.json</strong>:项目的配置文件，定义了项目的基本信息、依赖、脚本等</p><p><strong>README</strong>:项目的使用说明文件</p><p><strong>vite.config.js</strong>:存放的vite的相关配置，比如插件、路径别名、开发服务器等</p><p><strong>yarn.lock</strong>: 用于确保每次安装依赖时都使用相同版本的锁文件。它由yarn管理，确保依赖的稳定性</p><h2 id="vue运行过程"><a href="#vue运行过程" class="headerlink" title="vue运行过程"></a>vue运行过程</h2><h3 id="创建vue实例"><a href="#创建vue实例" class="headerlink" title="创建vue实例"></a>创建vue实例</h3><blockquote><p>在 Vue 项目中，<code>main.js</code> 文件是整个应用的入口文件。在执行 <code>npm run dev</code> 命令时，Vite 或 Webpack 会从 <font color="skyblue"><strong>src&#x2F;main.js</strong></font> 开始加载应用。</p></blockquote><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>   <span class="comment">// 引入 Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span>               <span class="comment">// 引入全局样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>  <span class="comment">// 引入根组件</span></span><br><span class="line"><span class="comment">// 创建 Vue 实例并挂载到 #app 元素上</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="生成虚拟-DOM-和组件渲染"><a href="#生成虚拟-DOM-和组件渲染" class="headerlink" title="生成虚拟 DOM 和组件渲染"></a>生成虚拟 DOM 和组件渲染</h3><blockquote><p>在 Vue 3 中，组件的渲染分为结构、样式和交互三个部分。在 <code>App.vue</code> 中，我们通常看到三个部分：<code>&lt;template&gt;</code>、<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code>。</p></blockquote><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--交互--&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import HelloWorld from &#x27;./components/HelloWorld.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!--结构--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;a href=&quot;https://vite.dev&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">      &lt;img src=&quot;/vite.svg&quot; class=&quot;logo&quot; alt=&quot;Vite logo&quot; /&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;https://vuejs.org/&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">      &lt;img src=&quot;./assets/vue.svg&quot; class=&quot;logo vue&quot; alt=&quot;Vue logo&quot; /&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;HelloWorld msg=&quot;Vite + Vue&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;!--样式--&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.logo &#123;</span><br><span class="line">  height: 6em;</span><br><span class="line">  padding: 1.5em;</span><br><span class="line">  will-change: filter;</span><br><span class="line">  transition: filter 300ms;</span><br><span class="line">&#125;</span><br><span class="line">.logo:hover &#123;</span><br><span class="line">  filter: drop-shadow(0 0 2em #646cffaa);</span><br><span class="line">&#125;</span><br><span class="line">.logo.vue:hover &#123;</span><br><span class="line">  filter: drop-shadow(0 0 2em #42b883aa);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>交互</strong>：使用 <code>&lt;script setup&gt;</code> 语法，引入子组件 <code>HelloWorld.vue</code>。</p><p><strong>结构</strong>：模板部分，定义页面的 HTML 结构。</p><p><strong>样式</strong>：使用 <code>&lt;style scoped&gt;</code> 编写组件的样式。</p><p>当 <code>App.vue</code> 渲染时，它首先加载 <code>HelloWorld</code> 组件，并在模板中渲染该组件。Vue 会将模板转换成虚拟 DOM，并根据响应式数据的变化来更新视图。</p><h3 id="创建入口文件"><a href="#创建入口文件" class="headerlink" title="创建入口文件"></a>创建入口文件</h3><blockquote><p>index.html 是项目的首页，入口页，也是整个项目唯一的HTML页面</p></blockquote><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/svg+xml&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/vite.svg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vite + Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- Vue 会将应用挂载到这个元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/src/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="comment">&lt;!-- 引入入口文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个页面的 <code>#app</code> 元素将是 Vue 实例的挂载点。</p><p><code>script</code> 标签引入了 <code>main.js</code> 文件，这是整个 Vue 应用的入口。</p><h1 id="vue开发基础"><a href="#vue开发基础" class="headerlink" title="vue开发基础"></a>vue开发基础</h1><h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><p>每个单文件组件由模板、样式和逻辑3个部分构成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-此处编写组件的结构-&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">/*此处编写组件的逻辑*/</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">/休此处编写组件的样式*/</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="初始数据绑定"><a href="#初始数据绑定" class="headerlink" title="初始数据绑定"></a>初始数据绑定</h2><p>定义数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line"> setup()&#123;</span><br><span class="line"> return&#123;</span><br><span class="line">  数据名：数据值</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>使用setup语法糖来定义数据的语法格式如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const数据名=数据值</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当页面渲染时，模板中的会被替换为实际的数据</p><p>在Mustache语法中还可以将表达式的值作为输出内容。表达式的值可以是字符串、数字等类型，示例代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#x27;Hello Vue.js&#x27;&#125;&#125;</span><br><span class="line">&#123;&#123;number+1&#125;&#125;</span><br><span class="line">&#123;&#123;obj.name &#125;&#125;</span><br><span class="line">&#123;&#123;ok &#x27;YES&#x27;:&#x27;NO&#x27;&#125;&#125;</span><br><span class="line">&#123;&#123;&#x27;&lt;div&gt;HTML标签&lt;/div&gt;&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="数据绑定的实现"><a href="#数据绑定的实现" class="headerlink" title="数据绑定的实现"></a>数据绑定的实现</h3><p>创建src\components\Message.vue文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const message = &#x27;不积跬步无以至千里&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>更改main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Message.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="将vue引入HTML页面"><a href="#将vue引入HTML页面" class="headerlink" title="将vue引入HTML页面"></a>将vue引入HTML页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm=<span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">message</span>:<span class="string">&#x27;hello world&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">             &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            vm.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="响应式数据绑定"><a href="#响应式数据绑定" class="headerlink" title="响应式数据绑定"></a>响应式数据绑定</h2><p>vue为开发者提供了如下函数定义响应式数据</p><p><strong>ref()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &#123;&#123; Message &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const Message = ref(&#x27;Hello World&#x27;)</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    Message.value = &#x27;Hello Vue 3.0&#x27;</span><br><span class="line">&#125;, 2000)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>reactive()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &#123;&#123;obj.message&#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">const obj=reactive(&#123;message:&#x27;Hello World&#x27;&#125;)</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    obj.message = &#x27;Hello Vue 3.0&#x27;</span><br><span class="line">&#125;, 2000);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>toRef()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;message的值:&#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;obj.message的值:&#123;&#123;obj.message&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; reactive, toRef &#125; from &#x27;vue&#x27;</span><br><span class="line">const obj = reactive(&#123; message: &#x27;hello&#x27; &#125;)//创建一个响应式对象</span><br><span class="line">const message=toRef(obj,&#x27;message&#x27;) // 将响应式对象obj中的message属性转换为响应式引用</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    message.value = &#x27;world&#x27;</span><br><span class="line">&#125;, 2000)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>toRefs()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;message的值:&#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;obj.message的值:&#123;&#123;obj.message&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; reactive, toRefs &#125; from &#x27;vue&#x27;</span><br><span class="line">const obj = reactive(&#123; message: &#x27;hello&#x27;&#125;)</span><br><span class="line">let &#123;message&#125; = toRefs(obj)</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    message.value = &#x27;world&#x27;</span><br><span class="line">&#125;, 2000)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><font color="red"><strong>区别</strong></font></p><p>**使用 <code>reactive</code>**：当你需要处理 <strong>对象</strong> 或 <strong>数组</strong> 的响应式数据时，<code>reactive</code> 更自然，因为它能深度响应式地处理这些类型的数据，并且不需要 <code>.value</code> 访问对象的属性。</p><p>**使用 <code>ref</code>**：当你需要处理 <strong>基本类型</strong>（如字符串、数字、布尔值）时，<code>ref</code> 更适合，因为它是为这些类型专门设计的，能够轻松管理单一数据。</p><p>**使用 <code>toRef</code>**：当你想将 <strong>响应式对象</strong> 的某个属性转换为单独的响应式引用时，使用 <code>toRef</code>。它会返回一个新的响应式引用 <code>Ref</code>，你可以直接通过 <code>.value</code> 访问这个属性。</p><p>**使用 <code>toRefs</code>**：当你需要将 <strong>整个响应式对象</strong> 中的每个属性转换为响应式引用时，使用 <code>toRefs</code>。它返回一个新的对象，包含响应式对象中每个属性的 <code>ref</code> 引用。</p><h2 id="内容渲染指令"><a href="#内容渲染指令" class="headerlink" title="内容渲染指令"></a>内容渲染指令</h2><p>v-text用于渲染DOM元素的文本内容，如果文本内容中包含HTML标签，<font color="sykblue"><strong>那么浏览器不会对其进行解析。</strong></font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-text=&quot;Message&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const Message = &#x27;&lt;span&gt;Hello World&lt;/span&gt;&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2025/01/22/Vue3/Vue3-1/shuchu1.png" class=""><p>在使用Vue进行内容渲染时，如果内容中包含HTML标签并且希望<font color="sykblue"><strong>这些标签被浏览器解析</strong></font>，则可以使用v-html。v-html用于渲染DOM元素的HTML内容，其用法与v-text相似。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-html=&quot;html&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const html = &#x27;&lt;strong&gt;Hello World&lt;/strong&gt;&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2025/01/22/Vue3/Vue3-1/shuchu2.png" class=""><h2 id="属性绑定指令"><a href="#属性绑定指令" class="headerlink" title="属性绑定指令"></a>属性绑定指令</h2><p>在Vue开发中，有时需要绑定DOM元素的属性，从而更好地控制属性的值，此时可以使用属性绑定<font color="skyblue"><strong>指令v-bind</strong></font>来实现。</p><p>v-bind还支持将属性与字符串拼接表达式绑定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type=&quot;text&quot; v-bind:placeholder=&quot;username&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type=&quot;password&quot; :placeholder=&quot;password&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const username = ref(&#x27;请输入用户名&#x27;)</span><br><span class="line">const password = ref(&#x27;请输入密码&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="事件绑定指令"><a href="#事件绑定指令" class="headerlink" title="事件绑定指令"></a>事件绑定指令</h2><blockquote><p>在Vue开发中，有时需要给DOM元素绑定事件，从而利用事件实现交互效果，这时可以利用事件绑定<font color="skyblue"><strong>指令v-on</strong></font>来实现。</p><p>v-on还有简写形式，可以将”v-on:事件名”简写为<font color="skyblue"><strong>“@事件名”</strong></font></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">V-on:事件名</span>=<span class="string">&quot;事件处理器&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt; </span><br><span class="line">    &lt;button @click=&quot;showInfo&quot;&gt;输出信息&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const showInfo = () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;我是一个按钮&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="双向数据绑定指令"><a href="#双向数据绑定指令" class="headerlink" title="双向数据绑定指令"></a>双向数据绑定指令</h2><blockquote><p>Vue为开发者提供了<font color="skyblue"><strong>v-model指令</strong></font>来实现双向数据绑定，使用它可以在<font color="skyblue"><strong>input、textarea和select元素</strong></font>上创建双向数据绑定，它会根据使用的元素自动选取对应的属性和事件组合，负责监听用户的输入事件并更新数据。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;标签名 v-model=:&quot;数据名&quot;&gt;&lt;/标签名&gt;</span><br></pre></td></tr></table></figure><p>为了方便对用户输入的内容进行处理，v-model提供了3个修饰符。v-model的修饰符如下表所示:</p><img src="/2025/01/22/Vue3/Vue3-1/xiushi.png" class=""><p><strong>.number</strong> (如果不加.number默认是字符串类型)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    请输入姓名:&lt;input type=&quot;text&quot; v-model=&quot;username&quot;&gt;</span><br><span class="line">    &lt;div&gt;姓名是: &#123;&#123;username&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model.number=&quot;n1&quot;&gt;+&lt;input type=&quot;text&quot; v-model.number=&quot;n2&quot;&gt;=&#123;&#123;n1+n2&#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const username = ref(&#x27;zhangsan&#x27;)</span><br><span class="line">const n1 = ref(1)</span><br><span class="line">const n2 = ref(2)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h2><blockquote><p>在Vue中，当需要<font color="skyblue"><strong>根据不同的判断结果</strong></font>显示不同的DOM元素时，可以通过<font color="skyblue"><strong>条件渲染指令</strong></font>来实现。条件渲染指令可以辅助开发者按需控制DOM元素的显示与隐藏。</p></blockquote><p>条件渲染指令如下。</p><p><strong>v-if</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    小明的学习评定等级为:</span><br><span class="line">    &lt;p v-if=&quot;type === &#x27;A&#x27;&quot;&gt;优秀&lt;/p&gt;</span><br><span class="line">    &lt;p v-else-if=&quot;type === &#x27;B&#x27;&quot;&gt;良好&lt;/p&gt;</span><br><span class="line">    &lt;p v-else&gt;差&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;type =&#x27;A&#x27;&quot;&gt;切换成优秀&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;type =&#x27;B&#x27;&quot;&gt;切换成良好&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;type =&#x27;C&#x27;&quot;&gt;切换成差&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const type = ref(&#x27;B&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>v-show</strong></p><p>v-show的原理是通过为元素添加或移除display:none样式来实现元素的显示或隐藏。当需要频繁切换某个元素的显示或隐藏时，使用V-show会更节省性能开销；而当只需要切换一次显示或隐藏时，使用V-f更合理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p v-if=&quot;flag&quot;&gt;通过v-if控制的元素&lt;/p&gt;</span><br><span class="line">    &lt;p v-show=&quot;flag&quot;&gt;通过v-show控制的元素&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;flag = !flag&quot;&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const flag = ref(true)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="列表渲染指令"><a href="#列表渲染指令" class="headerlink" title="列表渲染指令"></a>列表渲染指令</h2><blockquote><p>Vue提供了列表渲染指令V-for。开发者只需在模板中定义一件商品的结构，V-for便会根据开发者提供的数据自动渲染商品列表中所有的商品</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-for=&quot;(item,index) in list&quot;:key=&quot;index&quot;&gt;</span><br><span class="line">        索引是:&#123;&#123;index&#125;&#125; ---元素的内容是:&#123;&#123;item&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">const list=reactive([&#x27;张三&#x27;,&#x27;李四&#x27;,&#x27;王五&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2025/01/22/Vue3/Vue3-1/vfor.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        id是: &#123;&#123; item.id &#125;&#125; --- 元素的内容是: &#123;&#123; item.message &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">const list = reactive([</span><br><span class="line">    &#123; id: 1, message: &#x27;hello&#x27; &#125;,</span><br><span class="line">    &#123; id: 2, message: &#x27;world&#x27; &#125;,</span><br><span class="line">    &#123; id: 3, message: &#x27;vue&#x27; &#125;,</span><br><span class="line">])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2025/01/22/Vue3/Vue3-1/vfor2.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-for=&quot;(value,name) in user&quot; :key=&quot;name&quot;&gt;</span><br><span class="line">        属性名是:&#123;&#123;name&#125;&#125; --- 属性值是:&#123;&#123;value&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">const user=reactive(&#123;</span><br><span class="line">    id:1,</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    gender:&#x27;男&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2025/01/22/Vue3/Vue3-1/vfor3.png" class=""><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><h3 id="通过事件方法的参数获取事件对象"><a href="#通过事件方法的参数获取事件对象" class="headerlink" title="通过事件方法的参数获取事件对象"></a>通过事件方法的参数获取事件对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;count的值为:&#123;&#123; count &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;addCount&quot;&gt;count+1&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const count = ref(1)</span><br><span class="line">const addCount = event =&gt; &#123;</span><br><span class="line">    count.value++</span><br><span class="line">    if(count.value%2 === 0)&#123;</span><br><span class="line">       event.target.style.border=&quot;3px dotted&quot;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        event.target.style.border=&quot;3px solid&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2025/01/22/Vue3/Vue3-1/event.png" class=""><h3 id="通过-event获取事件对象"><a href="#通过-event获取事件对象" class="headerlink" title="通过$event获取事件对象"></a>通过$event获取事件对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;count的值为:&#123;&#123; count &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;addCount&quot;&gt;count+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;addCountN(3,$event)&quot;&gt;count+n&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const count = ref(1)</span><br><span class="line">const addCount = event =&gt; &#123;</span><br><span class="line">    count.value++</span><br><span class="line">    if(count.value%2 === 0)&#123;</span><br><span class="line">       event.target.style.border=&quot;3px dotted&quot;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        event.target.style.border=&quot;3px solid&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">const addCountN =(n,event)=&gt;&#123;</span><br><span class="line">    count.value+=n</span><br><span class="line">    if(count.value%2 === 0)&#123;</span><br><span class="line">       event.target.style.border=&quot;3px dotted&quot;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        event.target.style.border=&quot;3px solid&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2025/01/22/Vue3/Vue3-1/event2.png" class=""><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><h3 id="阻止默认事件行为"><a href="#阻止默认事件行为" class="headerlink" title="阻止默认事件行为"></a>阻止默认事件行为</h3><p>.prevent</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;test.html&quot; v-on:click.prevent&gt;阻止默认跳转行为&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h3><p>.stop</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-on:click =&quot;show(&#x27;我是父元素的事件&#x27;)&quot;&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;show(&#x27;我是子元素的事件&#x27;)&quot;&gt;事件冒泡&lt;/button&gt;</span><br><span class="line">    &lt;button v-on:click.stop=&quot;show(&#x27;我是子元素的事件&#x27;)&quot;&gt;阻止事件冒泡&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">let show=message =&gt;console.log(message)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>事件冒泡控制台输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是子元素的事件</span><br><span class="line">我是父元素的事件</span><br></pre></td></tr></table></figure><p>阻止事件冒泡控制台输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我是子元素的事件</span><br></pre></td></tr></table></figure><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p>.captrue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-on:click.capture =&quot;show(&#x27;我是父元素的事件&#x27;)&quot;&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;show(&#x27;我是子元素的事件&#x27;)&quot;&gt;事件冒泡&lt;/button&gt;</span><br><span class="line">    &lt;button v-on:click.stop=&quot;show(&#x27;我是子元素的事件&#x27;)&quot;&gt;阻止事件冒泡&lt;/button&gt;</span><br><span class="line">      &lt;!-- 事件捕获 --&gt;</span><br><span class="line">   &lt;button v-on:click=&quot;show(&#x27;我是子元素的事件&#x27;)&quot;&gt;事件捕获&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>控制台输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是父元素的事件</span><br><span class="line">我是子元素的事件</span><br></pre></td></tr></table></figure><h3 id="使事件只触发一次"><a href="#使事件只触发一次" class="headerlink" title="使事件只触发一次"></a>使事件只触发一次</h3><p>.once</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-on:click.once=&quot;show(&#x27;我是当前元素的单击事件并且只执行一次&#x27;)&quot;&gt;只执行一次&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>使DOM元素只有自身触发事件时才执行事件方法</p><p>.self</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">   &lt;div v-on:click=&quot;show(&#x27;我是祖先元素的事件&#x27;)&quot;&gt;祖先元素</span><br><span class="line">      &lt;div v-on:click.self=&quot;show(&#x27;我是父元素的事件&#x27;)&quot;&gt;父元素</span><br><span class="line">         &lt;div v-on:click=&quot;show(&#x27;我是子元素的事件&#x27;)&quot;&gt;子元素&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">       </span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">let show=message =&gt;console.log(message);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>点击子元素输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是子元素的事件</span><br><span class="line">我是祖先元素的事件</span><br></pre></td></tr></table></figure><h3 id="监听滚动事件"><a href="#监听滚动事件" class="headerlink" title="监听滚动事件"></a>监听滚动事件</h3><p>.passive主要用于优化移动端设备的滚屏性能，优先响应滚动事件而不是滚动事件的回调函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-on:scroll.passive=&quot;onScroll&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="捕获特定按键"><a href="#捕获特定按键" class="headerlink" title="捕获特定按键"></a>捕获特定按键</h3><ul><li>**.enter:**捕获Enter键</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;input type=&quot;text&quot; v-on:keyup.enter=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">let show=message =&gt;console.log(message);</span><br><span class="line">let submit=()=&gt;&#123;</span><br><span class="line">  console.log(&quot;捕获到Enter键盘&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>输入框输入enter&#x2F;enter+其他组合键，控制台输出捕获到Enter键盘</p><p>加上.exact 只能输入enter输出</p><ul><li><p>**.esc:**捕获Esc键</p></li><li><p>**.tab:**捕获Tab键</p></li><li><p>**.delete:**捕获Delete和Backspace键</p></li><li><p>**.ctrl:**捕获Ctrl键</p></li><li><p>**.alt:**捕获Alt键</p></li><li><p>**.shift:**捕获Shift键</p></li><li><p>**.meta:**捕获Ctrl键</p></li></ul><h3 id="捕获鼠标按键"><a href="#捕获鼠标按键" class="headerlink" title="捕获鼠标按键"></a>捕获鼠标按键</h3><p>.left:捕获鼠标左键</p><p>.middle:捕获鼠标中键</p><p>.right:捕获鼠标右键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;button v-on:click.left=&quot;show(&#x27;捕获到鼠标左键&#x27;)&quot;&gt;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">let show=message =&gt;console.log(message);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><h3 id="定义计算属性"><a href="#定义计算属性" class="headerlink" title="定义计算属性"></a>定义计算属性</h3><p>computed()函数的参数为一个回调函数，开发者需要在回调函数中实现计算功能，并在计算完成后返回计算后的数据，语法格式如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import computed from &#x27;vue&#x27;</span><br><span class="line">const 计算属性名 =computed(()=&gt;&#123;</span><br><span class="line"> return 计算后的数据</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="输出计算属性"><a href="#输出计算属性" class="headerlink" title="输出计算属性"></a>输出计算属性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;初始message:&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;反转之后的message:&#123;&#123;reversedMessage&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;updateMessage&quot;&gt;更改&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, computed &#125; from &#x27;vue&#x27;</span><br><span class="line">const message = ref(&#x27;Hello Vue3!&#x27;)</span><br><span class="line">const reversedMessage = computed(() =&gt; </span><br><span class="line">    message.value.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)</span><br><span class="line">)</span><br><span class="line">const updateMessage = () =&gt; &#123;</span><br><span class="line">    message.value = &#x27;Hello&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h2><p>侦听器通过watch()函数定义，watch()函数的语法格式如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch(侦听器的来源，回调函数，可选参数)</span><br></pre></td></tr></table></figure><p>侦听器的来源：</p><ul><li>一个函数，返回一个值</li><li>一个响应式数据</li><li>一个响应式对象</li><li>一个由以上类型组成的数组</li></ul><p>回调函数：</p><p>数据发生变化时要调用的回调函数，这个回调函数的第1个参数表示新值，即数据发生变化后的值，第2个参数表示旧值，即数据发生变化前的值。</p><p>可选参数：</p><p>是一个对象</p><p>deep：默认情况下，当侦听一个对象时，如果对象中的属性值发生了变化，则无法被监听到。如果想监听到，可以将该选项设为true,表示进行深度监听。该选项的默认值为false,表示不使用该选项。</p><p>immediate：:默认情况下，组件在初次加载完毕后不会调用侦听器的回调函数，如果想让侦听器的回调函数立即被调用，则需要将选项设为true。该选项的默认值为false,表示不使用该选项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;cityName&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;watch,ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const cityName = ref(&#x27;beijing&#x27;)</span><br><span class="line">watch(cityName,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(newValue,oldValue);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>更改输入框的值，控制台输出新值 旧值</p><h2 id="绑定class属性"><a href="#绑定class属性" class="headerlink" title="绑定class属性"></a>绑定class属性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-bind:class=&quot;className&quot;&gt;梦想&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const className = &#x27;box&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">   border:1px solid black;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><img src="/2025/01/22/Vue3/Vue3-1/class.png" class=""><h3 id="将class属性值绑定为对象"><a href="#将class属性值绑定为对象" class="headerlink" title="将class属性值绑定为对象"></a>将class属性值绑定为对象</h3><p>在Vue中，可以将class属性值绑定为对象，从而动态地改变class属性值。对象中包含的属性名表示类名，属性值为布尔类型，如果属性值为true,表示类名生效，否则类名不生效。将class属性值绑定为对象的示例代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div v-bind:class=&quot;&#123;className:isActive&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">const isActive = ref(true)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="将class属性值绑定为数组"><a href="#将class属性值绑定为数组" class="headerlink" title="将class属性值绑定为数组"></a>将class属性值绑定为数组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-bind:class=&quot;[activeClass,borderClass]&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div v-bind:class=&quot;[isActive?activeClass:&#x27;&#x27;,borderClass]&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div v-bind:class=&quot;[&#123;active:isActive&#125;,borderClass]&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const isActive = ref(true)</span><br><span class="line">const activeClass = ref(&#x27;active&#x27;)</span><br><span class="line">const borderClass = ref(&#x27;border&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.active&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 10px;</span><br><span class="line">    margin-bottom: 2px;</span><br><span class="line">    background-color: rgb(59, 192, 241);</span><br><span class="line">&#125;</span><br><span class="line">.border&#123;</span><br><span class="line">    border:2px solid rgb(0,0,0);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><img src="/2025/01/22/Vue3/Vue3-1/class2.png" class=""><h2 id="绑定style属性"><a href="#绑定style属性" class="headerlink" title="绑定style属性"></a>绑定style属性</h2><blockquote><p>在Vue中，将styl&#x2F;属性值绑定为对象时，该对象中的属性名表示CSS属性名，属性值为CSS属性值。以对象语法绑定元素的stye属性</p></blockquote><h3 id="将style属性值绑定为对象"><a href="#将style属性值绑定为对象" class="headerlink" title="将style属性值绑定为对象"></a>将style属性值绑定为对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-bind:style=&quot;&#123;&#x27;background-color&#x27;:pink,width,height:height+&#x27;px&#x27;&#125;&quot;&gt;</span><br><span class="line">       &lt;div v-bind:style=&quot;&#123;backgroundColor:isBlue?blue:&#x27;black&#x27;,width:&#x27;50px&#x27;,height:&#x27;20px&#x27;&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div v-bind:style=&quot;myDiv&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;ref,reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">const isBlue = ref(false)</span><br><span class="line">const blue=ref(&#x27;blue&#x27;)</span><br><span class="line">const pink=ref(&#x27;pink&#x27;)</span><br><span class="line">const width=ref(&#x27;100%&#x27;)</span><br><span class="line">const height=ref(40)</span><br><span class="line">const myDiv=reactive(&#123;</span><br><span class="line">    width:&#x27;50px&#x27;,</span><br><span class="line">    height:&#x27;20px&#x27;,</span><br><span class="line">    backgroundColor:&#x27;red&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2025/01/22/Vue3/Vue3-1/style.png" class=""><h3 id="将style属性绑定为数组"><a href="#将style属性绑定为数组" class="headerlink" title="将style属性绑定为数组"></a>将style属性绑定为数组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-bind:style=&quot;[activeClass,borderClass]&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div v-bind:style=&quot;[isActive?activeClass:&#x27;&#x27;,borderClass]&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div v-bind:style=&quot;[&#123;backgroundColor:&#x27;rgb(59,192,241)&#x27;,height:&#x27;10px&#x27;&#125;,borderClass]&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref,reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">const isActive = ref(true)</span><br><span class="line">const activeClass = reactive(&#123;</span><br><span class="line">    backgroundColor:&#x27;rgb(59,192,241)&#x27;,</span><br><span class="line">    height:&#x27;10px&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">const borderClass = reactive(&#123;</span><br><span class="line">    border:&#x27;2px solid black&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2025/01/22/Vue3/Vue3-1/style2.png" class=""><h2 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h2><h3 id="选项式API和组合式API"><a href="#选项式API和组合式API" class="headerlink" title="选项式API和组合式API"></a>选项式API和组合式API</h3><p>选项式API</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line"> data()&#123;</span><br><span class="line"> return&#123;//定义数据&#125;</span><br><span class="line">&#125;,</span><br><span class="line"> methods:&#123;//定义方法&#125;，</span><br><span class="line"> computed:&#123;//定义计算属性&#125;，</span><br><span class="line"> watch:&#123;//定义侦听器&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>组合式API</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;computed,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">export default&#123;</span><br><span class="line"> setup()</span><br><span class="line">  const数据名=数据值</span><br><span class="line">  const方法名=()=&gt;&#123;&#125;</span><br><span class="line">  const计算属性名=computed(()=&gt;&#123;&#125;)</span><br><span class="line">  watch(侦听器的来源，回调函数，可选参数)</span><br><span class="line">  return&#123;数据名，方法名，计算属性名&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>setup语法糖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;computed,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">//定义数据</span><br><span class="line">const 数据名=数据值</span><br><span class="line">//定义方法</span><br><span class="line">const 方法名=()=&gt;&#123;&#125;</span><br><span class="line">//定义计算属性</span><br><span class="line">const 计算属性名=computed(()=&gt;&#123;&#125;)</span><br><span class="line">//定义侦听器</span><br><span class="line">watch(侦听器的来源，回调函数,可选参数)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>举例：选项式API</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;数字:&#123;&#123; number &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;addNumber&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            number: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        addNumber() &#123;</span><br><span class="line">            this.number++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>组合式API</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;数字:&#123;&#123; number &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;addNumber&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">let number=ref(1)</span><br><span class="line">const addNumber=()=&gt;&#123;</span><br><span class="line">    number.value++</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h3><p>组合式API下的生命周期函数：</p><img src="/2025/01/22/Vue3/Vue3-1/api.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;container&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; onBeforeMount, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line">onBeforeMount(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;DOM元素渲染前&#x27;,document.querySelector(&#x27;.container&#x27;))</span><br><span class="line">&#125;)</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;DOM元素渲染后&#x27;,document.querySelector(&#x27;.container&#x27;))</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2025/01/22/Vue3/Vue3-1/xuanran.png" class=""><p>选项式API下的生命周期函数：</p><img src="/2025/01/22/Vue3/Vue3-1/xuanran2.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;container&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            value: &quot;Hello&quot;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeCreate() &#123;</span><br><span class="line">        console.log(&quot;实例对象创建前：&quot; + this.value); </span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">        console.log(&quot;实例对象创建后：&quot; + this.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">实例对象创建前:undefined</span><br><span class="line">实例对象创建后:Hello</span><br></pre></td></tr></table></figure><h2 id="注册组件"><a href="#注册组件" class="headerlink" title="注册组件"></a>注册组件</h2><h3 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">component(&#x27;组件名称&#x27;，需要被注册的组件)</span><br></pre></td></tr></table></figure><p>在src\main。js文件中注册一个全局组件MyComponent,示例代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#x27;./style.css&#x27;;</span><br><span class="line">import App from &#x27;./App.vue&#x27;;</span><br><span class="line">import MyComponent from &#x27;./components/MyComponent.vue&#x27;;</span><br><span class="line"></span><br><span class="line">const app = createApp(App);</span><br><span class="line">app.component(&#x27;MyComponent&#x27;, MyComponent);</span><br><span class="line">app.mount(&#x27;#app&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>component()方法支持链式调用，可以连续注册多个组件，示例代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.component(&#x27;ComponentA&#x27;,ComponentA)</span><br><span class="line">.component(&#x27;ComponentB&#x27;,ComponentB)</span><br><span class="line">.component(&#x27;ComponentC&#x27;,ComponentC)</span><br></pre></td></tr></table></figure><h3 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import ComponentA from &#x27;./ComponentA.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ComponentA</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在使用setup语法糖时，导入的组件会被自动注册，无手动注册，导入后可以直接在模板中使用，示例代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import ComponentA from&#x27;./ComponentA.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="引用组件"><a href="#引用组件" class="headerlink" title="引用组件"></a>引用组件</h2><p>ComponentUse.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h5&gt;父组件&lt;/h5&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">        &lt;GlobalComponent/&gt;</span><br><span class="line">        &lt;LocalComponent/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.box &#123;</span><br><span class="line"> display: flex;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import GlobalComponent from &#x27;./GlobalComponent.vue&#x27;;</span><br><span class="line">import LocalComponent from &#x27;./LocalComponent.vue&#x27;;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>GlobalComponent.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;global-container&quot;&gt;</span><br><span class="line">        &lt;h5&gt;全局组件&lt;/h5&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .global-container &#123;</span><br><span class="line">       border:1px solid black;</span><br><span class="line">       height: 50px;</span><br><span class="line">       flex:1;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>LocalComponent.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;local-cantainer&quot;&gt;</span><br><span class="line">        &lt;h5&gt;局部组件&lt;/h5&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.local-cantainer &#123;</span><br><span class="line">    border: 1px dashed black;</span><br><span class="line">    height: 50px;</span><br><span class="line">    flex: 1;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./components/ComponentUse.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">GlobalComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./components/GlobalComponent.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;GlobalComponent&#x27;</span>, <span class="title class_">GlobalComponent</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2025/01/22/Vue3/Vue3-1/zujian.png" class=""><h3 id="解决组件之间的样式冲突"><a href="#解决组件之间的样式冲突" class="headerlink" title="解决组件之间的样式冲突"></a>解决组件之间的样式冲突</h3><p>scoped</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h5&gt;父组件&lt;/h5&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">        &lt;GlobalComponent/&gt;</span><br><span class="line">        &lt;LocalComponent/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt; </span><br><span class="line">.box &#123;</span><br><span class="line"> display: flex;</span><br><span class="line">&#125;</span><br><span class="line">h5&#123;</span><br><span class="line">    border: 1px dotted black;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style &gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import GlobalComponent from &#x27;./GlobalComponent.vue&#x27;;</span><br><span class="line">import LocalComponent from &#x27;./LocalComponent.vue&#x27;;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2025/01/22/Vue3/Vue3-1/scope.png" class=""><p>深度选择器</p><blockquote><p>如果给当前组件的<style>标签添加了scoped属性，则当前组件的样式对其子组件是不生效的,如果在添加了scoped属性后还需要让某些样式对组件生效，则可以使用深度选择器来实现。</p></blockquote><p>深度选择器通过：deep()伪类来实现，在其小括号中可以定义用于子组件的选择器，例如，“:deep(.title)”被编译之后生成选择器的格式为”[data-v-7ba5bd90].title”。</p><p>ComponentUse.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h5&gt;父组件&lt;/h5&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">        &lt;GlobalComponent/&gt;</span><br><span class="line">        &lt;LocalComponent/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt; </span><br><span class="line">.box &#123;</span><br><span class="line"> display: flex;</span><br><span class="line">&#125;</span><br><span class="line">h5&#123;</span><br><span class="line">    border: 1px dotted black;</span><br><span class="line">&#125;</span><br><span class="line">/* 用:deep()选择器 */</span><br><span class="line">:deep(.title)&#123;</span><br><span class="line">   border: 3px dotted black;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import GlobalComponent from &#x27;./GlobalComponent.vue&#x27;;</span><br><span class="line">import LocalComponent from &#x27;./LocalComponent.vue&#x27;;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>LocalComponent.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;local-cantainer&quot;&gt;</span><br><span class="line">         &lt;!-- 添加class属性 --&gt;</span><br><span class="line">        &lt;h5 class=&quot;title&quot;&gt;局部组件&lt;/h5&gt; </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.local-cantainer &#123;</span><br><span class="line">    border: 1px dashed black;</span><br><span class="line">    height: 50px;</span><br><span class="line">    flex: 1;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="声明props"><a href="#声明props" class="headerlink" title="声明props"></a>声明props</h2><p>在不使用setup语法糖的情况下，可以使用props选项声明props。prop选项的形式可以是对象或字符串数组。声明对象形式的props的语法格式如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line"> props:&#123;</span><br><span class="line"> 自定义属性A:类型</span><br><span class="line"> 自定义属性B:类型，</span><br><span class="line"> ...</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如果不需要限制props的类型，可以声明字符串数组形式的props,示例代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">props:[&#x27;自定义属性A&#x27;,&#x27;自定义属性B&#x27;],</span><br></pre></td></tr></table></figure><p>当使用setup语法糖时，可使用defineProps()函数声明props,语法格式如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const props=defineProps(&#123;&#x27;自定义属性A&#x27;:类型&#125;，&#123;&#x27;自定义属性B&#x27;:类型&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>使用defineProps()函数声明字符串数组形式的props,语法格式如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const props=defineProps([&#x27;自定义属性A&#x27;,&#x27;自定义属性B&#x27;])</span><br></pre></td></tr></table></figure><p>在组件中声明了props后，可以直接在模板中输出每个prop的值，语法格式如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&#123;&#123;自定义属性A&#125;&#125;</span><br><span class="line">&#123;&#123;自定义属性B&#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="静态绑定props"><a href="#静态绑定props" class="headerlink" title="静态绑定props"></a>静态绑定props</h2><p>通过静态绑定orops的方式为子组件传递数据，其语法格式如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;子组件标签名 自定义属性A=&quot;数据&quot; 自定义属性B=&quot;数据”/&gt;</span><br></pre></td></tr></table></figure><p>在上述语法格式中，父组件向子组件的props传递了静态的数据，属性值默认为字符串类型。</p><p>如果子组件中未声明props,则父组件向子组件中传递的数据会被忽略，无法被子组件使用。</p><p>Count.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    初始值: &#123;&#123; num &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const props=defineProps(&#123;</span><br><span class="line">    num:String</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Props.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Count num=&quot;1&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import Count from &#x27;./Count.vue&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="动态绑定props"><a href="#动态绑定props" class="headerlink" title="动态绑定props"></a>动态绑定props</h2><p>字符串</p><p>从父组件中为子组件传递字符串类型的props数据，示例代码如下。</p><p>Child.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps([&#x27;init&#x27;])//可以接受父组件传来的名为init的数据</span><br><span class="line">console.log(props)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Props.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Child :init=&quot;username&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">const username = ref(&#x27;zhangsan&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>布尔</p><p>Child.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;init:Boolean&#125;)</span><br><span class="line">console.log(props)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Props.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Child init/&gt;</span><br><span class="line">    &lt;Child :init=&quot;false&quot;/&gt;</span><br><span class="line">    &lt;Child :init=&quot;isFlag&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">const isFlag = ref(true);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>数字</p><p>Child.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps([&#x27;init&#x27;])</span><br><span class="line">console.log(props)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Props.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;Child :init=&quot;12&quot;/&gt;</span><br><span class="line">    &lt;Child :init=&quot;age&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">// const username = ref(&#x27;zhangsan&#x27;);</span><br><span class="line">const age = ref(12);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>对象</p><p>Child.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps([&#x27;init&#x27;,&#x27;weight&#x27;,&#x27;height&#x27;])//可以接受父组件传来的名为init的数据</span><br><span class="line">console.log(props)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Props.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;Child :init=&quot;&#123;height:&#x27;180厘米&#x27;,weight:&#x27;70千克&#x27;&#125;&quot;/&gt;</span><br><span class="line">    &lt;Child :height=&quot;bodyInfo.height&quot;:weight=&quot;bodyInfo.weight&quot;/&gt;</span><br><span class="line">    &lt;Child v-bind=&quot;bodyInfo&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;;</span><br><span class="line">// const username = ref(&#x27;zhangsan&#x27;);</span><br><span class="line">// const age = ref(12);</span><br><span class="line">const bodyInfo = reactive(&#123;</span><br><span class="line">    height: &#x27;180厘米&#x27;,</span><br><span class="line">    weight: &#x27;70千克&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="验证props"><a href="#验证props" class="headerlink" title="验证props"></a>验证props</h2><h3 id="基础类型检查"><a href="#基础类型检查" class="headerlink" title="基础类型检查"></a>基础类型检查</h3><p>为props指定基础类型检查，示例代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line"> 自定义属性A:String,</span><br><span class="line"> 自定义属性B:Number,</span><br><span class="line"> 自定义属性C:Boolean,</span><br><span class="line"> 自定义属性D:Array,</span><br><span class="line"> 自定义属性E:Object,</span><br><span class="line"> 自定义属性F:Data,</span><br><span class="line"> 自定义属性G:Function,</span><br><span class="line"> 自定义属性H:Symbol,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过配置对象的形式定义验证规则，示例代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">自定义属性：&#123;type:Number&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果某个prop的类型不唯一，可以通过数组的形式为其指定多个可能的类型，示例代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line"> 自定义属性：&#123;type:[String,Array]&#125;,//字符串或数组</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="必填项的校验"><a href="#必填项的校验" class="headerlink" title="必填项的校验"></a>必填项的校验</h3><p>声明porops时通过required属性设置必填项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line"> 自定义属性：&#123;required:true&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性默认值"><a href="#属性默认值" class="headerlink" title="属性默认值"></a>属性默认值</h3><p>在声明props时，可以通过default属性定义属性默认值，当父组件没有向子组件的属性传递数据时，属性将会使用默认值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">自定义属性：&#123;default:O&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义验证函数"><a href="#自定义验证函数" class="headerlink" title="自定义验证函数"></a>自定义验证函数</h3><p>validator(）函数可以将prop的值作为唯一参数传入自定义验证函数，如果验证失败，则会在控制台中发出警告。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line"> 自定义属性：&#123;</span><br><span class="line">  validator(value)&#123;</span><br><span class="line">  return [&#x27;success&#x27;,&#x27;warning&#x27;,&#x27;danger&#x27;].indexOf(value)!==-1;</span><br><span class="line">  &#125;,</span><br><span class="line"> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在子组件中声明自定义事件"><a href="#在子组件中声明自定义事件" class="headerlink" title="在子组件中声明自定义事件"></a>在子组件中声明自定义事件</h2><p>在不使用setup语法糖时，可以通过emits选项声明自定义事件，示例代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line"> emits:[&#x27;demo&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在使用setup语法糖时，需要通过调用defineEmits()函数声明自定义事件，示例代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const emit=defineEmits([&#x27;demo&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="在子组件中触发自定义事件"><a href="#在子组件中触发自定义事件" class="headerlink" title="在子组件中触发自定义事件"></a>在子组件中触发自定义事件</h2><p>当使用场景简单时，可以使用内联事件处理器，通过调用$emit()方法触发自定义事件，将数据传递给使用的组件，示例代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;$emit(&#x27;demo&#x27;,1)&quot;&gt;按钮&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>在上述代码中，$emit（）方法的第1个参数为字符串类型的自定义事件的名称，第2个参数为需要传递的数据，当触发当前组件的事件时，该数据会传递给父组件。</p><p>除了使用内联方式外，还可以直接定义方法来触发自定义事件</p><p>在不使用setup语法糖时，可以从setup()函数的第2个参数（即setup上下文对象）来访问到emit()方法，示例代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line"> setup(props,ctx)&#123;</span><br><span class="line">  const update =()=&gt;&#123;</span><br><span class="line">   ctx.emit(&#x27;demo&#x27;,2)</span><br><span class="line">  &#125;</span><br><span class="line">  return &#123;update&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用setup语法糖，可以调用emit()函数来实现，示例代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const update =()=&gt;&#123;</span><br><span class="line"> emit(&#x27;demo&#x27;,2)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="在父组件监听自定义事件"><a href="#在父组件监听自定义事件" class="headerlink" title="在父组件监听自定义事件"></a>在父组件监听自定义事件</h2><p>CoustomEvents.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;父组件当前的值为:&#123;&#123; number &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;CustomSubComponent @updataCount=&quot;updataEmitCount&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import CustomSubComponent from &#x27;./CustomSubComponent.vue&#x27;;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">const number = ref(1);</span><br><span class="line">const updataEmitCount = (value) =&gt; &#123;</span><br><span class="line">    number.value += value;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>CustomSubComponent.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;值为:&#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;add&quot;&gt;加n&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const emit = defineEmits([&#x27;updataCount&#x27;])//声明一个自定义事件</span><br><span class="line">const count = ref(1)</span><br><span class="line">const add = () =&gt; &#123;</span><br><span class="line">    count.value++</span><br><span class="line">    emit(&#x27;updataCount&#x27;, 2) //触发事件，传递值给父组件</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="跨级组件之间的数据传递"><a href="#跨级组件之间的数据传递" class="headerlink" title="跨级组件之间的数据传递"></a>跨级组件之间的数据传递</h2><p>provide()函数</p><p>provide()函数可以提供一个值，用于被后代组件注入。provide()函数的语法格式如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">provide(注入名，注入值)</span><br></pre></td></tr></table></figure><p>不适用setup语法糖:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref,provide&#125; from &#x27;vue&#x27;</span><br><span class="line">export default&#123;</span><br><span class="line"> setup()</span><br><span class="line"> const count ref(1)</span><br><span class="line"> provide(&#x27;message&#x27;,count)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>使用setup:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;provide&#125; from &#x27;vue&#x27;</span><br><span class="line">provide(&#x27;message&#x27;,&#x27;Hello Vue.js&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>全局依赖，在main.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const app=createApp(App)</span><br><span class="line">app.provide(&#x27;message&#x27;,&#x27;Hello Vue.js&#x27;)</span><br></pre></td></tr></table></figure><p>inject()函数</p><p>通过inject()函数可以注入上层组件或者整个应用提供的数据。inject()函数的语法格式如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inject(注入值，默认值，布尔值)</span><br></pre></td></tr></table></figure><p>不使用setup</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import inject from &#x27;vue&#x27;;</span><br><span class="line">export default&#123;</span><br><span class="line"> setup()&#123;</span><br><span class="line">  const count=inject(&#x27;count&#x27;)</span><br><span class="line">  const foo=inject(&#x27;foo&#x27;,&#x27;default value&#x27;)</span><br><span class="line">  const baz=inject(&#x27;foo&#x27;,()=&gt;new Map())</span><br><span class="line">  const fn=inject(&#x27;function&#x27;,()=&gt;&#123;&#125;,false)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">script&gt;</span><br></pre></td></tr></table></figure><p>使用setup</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import inject from &#x27;vue&#x27;</span><br><span class="line">const count=inject(&#x27;count&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="定义动态组件"><a href="#定义动态组件" class="headerlink" title="定义动态组件"></a>定义动态组件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;component:is=&quot;要渲染的组件&quot;&gt;&lt;/component&gt;</span><br></pre></td></tr></table></figure><p>iS属性的属性值可以是字符串或组件，当属性值为组件时，如果要实现组件的切换，需要调用shallowRef(）函数定义响应式数据，将组件保存为响应式数据。shallowRef()函数只处理对象最外层属性的响应，它比ref()函数更适合于将组件保存为响应式数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;button @click=&quot;showComponent=MyLeft&quot;&gt;展示MyLeft组件&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showComponent=MyRight&quot;&gt;展示MyRight组件&lt;/button&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;component :is=&quot;showComponent&quot;&gt;&lt;/component&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup &gt;</span><br><span class="line">import MyLeft from &#x27;./MyLeft.vue&#x27;;</span><br><span class="line">import MyRight from &#x27;./MyRight.vue&#x27;;</span><br><span class="line">import &#123;shallowRef&#125; from &#x27;vue&#x27;;</span><br><span class="line">const showComponent = shallowRef(MyLeft);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2025/01/22/Vue3/Vue3-1/zujianhuan.png" class=""><h2 id="利用KeepAlive组件实现组件缓存"><a href="#利用KeepAlive组件实现组件缓存" class="headerlink" title="利用KeepAlive组件实现组件缓存"></a>利用KeepAlive组件实现组件缓存</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;button @click=&quot;showComponent=MyLeft&quot;&gt;展示MyLeft组件&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showComponent=MyRight&quot;&gt;展示MyRight组件&lt;/button&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;KeepAlive&gt;</span><br><span class="line">            &lt;component :is=&quot;showComponent&quot;&gt;&lt;/component&gt; </span><br><span class="line">            //被缓存的组件</span><br><span class="line">        &lt;/KeepAlive&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup &gt;</span><br><span class="line">import MyLeft from &#x27;./MyLeft.vue&#x27;;</span><br><span class="line">import MyRight from &#x27;./MyRight.vue&#x27;;</span><br><span class="line">import &#123;shallowRef&#125; from &#x27;vue&#x27;;</span><br><span class="line">const showComponent = shallowRef(MyLeft);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    MyLeft组件</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        count值:&#123;&#123;count&#125;&#125;</span><br><span class="line">        &lt;button @click=&quot;count++&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;ref,onMounted,onUnmounted&#125; from &#x27;vue&#x27;;</span><br><span class="line">const count = ref(0);</span><br><span class="line">onMounted(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;MyLeft组件被挂载&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">onUnmounted(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;MyLeft组件被卸载&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>加入 <KeepAlive><br>            <component :is="showComponent"></component><br>        </KeepAlive>之后MyLeft组件就不会被卸载</p><h2 id="组件缓存相关的生命周期函数"><a href="#组件缓存相关的生命周期函数" class="headerlink" title="组件缓存相关的生命周期函数"></a>组件缓存相关的生命周期函数</h2><p>当组件被激活时，会触发组件的onActivated()生命周期函数；当组件被缓存时，会触发组件的onDeactivated()生命周期函数。这两个生命周期函数的语法格式如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//onActivated()生命周期函数</span><br><span class="line">onActivated((=&gt;&#123;&#125;)</span><br><span class="line">//onDeactivated()生命周期函数</span><br><span class="line">onDeactivated(()=&gt;&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="KeepAlive组件的常用属性"><a href="#KeepAlive组件的常用属性" class="headerlink" title="KeepAlive组件的常用属性"></a>KeepAlive组件的常用属性</h2><img src="/2025/01/22/Vue3/Vue3-1/keep.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;KeepAlive include=&quot;组件名1,组件名2&quot;&gt;</span><br><span class="line">被缓存的组件</span><br><span class="line">&lt;/KeepAlive&gt;</span><br></pre></td></tr></table></figure><p>非setup</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line"> name:&#x27;MyComponent&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="什么是插槽"><a href="#什么是插槽" class="headerlink" title="什么是插槽"></a>什么是插槽</h2><p>定义插槽</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;button&gt;</span><br><span class="line">  &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line"> &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>在<slot>标签内可以添加一些内容作为插槽的默认内容。如果组件的使用者没有为插槽提供任何内容，则默认内容生效；如果组件的使用者为插槽提供了插槽内容，则该插槽内容会取代默认内容。</p><p>使用插槽</p><p>使用插槽即在父组件中使用子组件的插槽，在使用时需要将子组件写成双标签的形式，在双标签内提供插槽内容。例如，使用MyButton件的插槽的示例代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;MyButton&gt;</span><br><span class="line">  按钮</span><br><span class="line"> &lt;/MyButton&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>因为插槽内容是在父组件模板中定义的，所以在插槽内容中可以访问到父组件的数据。内容可以是任意合法的模板内容，不局限于文本。例如，可以使用多个元素或者组件作为插槽内容，示例代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyButton&gt;</span><br><span class="line"> &lt;span style=&quot;color:yellow,&quot;&gt;按钮&lt;/span&gt;</span><br><span class="line"> &lt;MyLeft/&gt;</span><br><span class="line">&lt;/MyButton&gt;</span><br></pre></td></tr></table></figure><p>子组件 (<code>ChildComponent.vue</code>)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;子组件内容&lt;/h3&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;  &lt;!-- 插槽 --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ChildComponent&gt;</span><br><span class="line">    &lt;p&gt;这是父组件传递的内容&lt;/p&gt;</span><br><span class="line">  &lt;/ChildComponent&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><p>子组件内容<br>这是父组件传递的内容</p><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot name=&quot;插槽名称&quot;&gt;&lt;/slot&gt;</span><br></pre></td></tr></table></figure><p>在父组件中，如果要把内容填充到指定名称的插槽中，可以通过一个包含V-sot指令的<template>标签来实现，语法格式如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;组件名&gt;</span><br><span class="line">&lt;template v-slot:插槽名称&gt;&lt;/template&gt;</span><br><span class="line">&lt;/组件名&gt;</span><br></pre></td></tr></table></figure><p>与v-on和v-bind类似，v-slot也有简写形式，即把v-slot:替换为#。例如，v-slot:title可以简写为#title。</p><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>定义数据</p><p>在封装组件的过程中，可以为预留的插槽定义数据，供父组件接收并使用子组件中的数据。在作用域插槽中，可以将将数据以类似传递props属性的形式添加到<slot>标签上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot message=&quot;Hello Vue.js&quot;&gt;&lt;/slot&gt;</span><br></pre></td></tr></table></figure><p>接收数据</p><p>默认插槽在Vue中，每个插槽都有name属性，表示插槽的名称。在定义插槽时虽然省略了<slot>标<br>签的name属性，但是name属性默认为default,这样的插槽属于默认插槽。</p><p>在父组件中可以通过v-slot指令接收插槽中定义的数据，即接收作用域插槽对外提供的数据。通过v-slot指令接收到的数据可以在插槽内通过Mustachei语法进行访问。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyHeader v-slot=&quot;scope&quot;&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;scope.message )&#125;&lt;/p&gt;</span><br><span class="line">&lt;/MyHeader&gt;</span><br></pre></td></tr></table></figure><p>通过v-slot接收从作用域插槽中传递的数据，scope作为形参，表示从作用域插槽中接收的数据，该形参的名称可以自定义。</p><h2 id="什么是自定义指令"><a href="#什么是自定义指令" class="headerlink" title="什么是自定义指令"></a>什么是自定义指令</h2><p>私有自定义指令：在组件内部定义的指令</p><p>全局自定义指令：在全局定义的指令。</p><p>常用的自定义指令生命周期函数：</p><img src="/2025/01/22/Vue3/Vue3-1/zidingyi.png" class=""><p>常用的自定义指令生命周期函数的参数如下表所示。</p><img src="/2025/01/22/Vue3/Vue3-1/canshu.png" class=""><p>binding中包含以下6个常用属性:</p><p>value:传递给指令的值。</p><p>arg:传递给指令的参数</p><p>oldValue:之前的值，仅在beforeUpdate()函数和updated()函数中可用，无论值是否更改都可用。</p><p>modifiers:一个包含修饰符的对象（如果有）。例如，在v-my-directive.foo.bar中，修饰符对象是{foo:true,bar:true}。</p><p>instance:使用该指令的组件实例。</p><p>dir:指令的定义对象</p><h2 id="私有自定义指令的声明与使用"><a href="#私有自定义指令的声明与使用" class="headerlink" title="私有自定义指令的声明与使用"></a>私有自定义指令的声明与使用</h2><p>没有使用setup</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line"> directives:&#123;</span><br><span class="line">  color:&#123;&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用自定义指令时，需要以“v-”开头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 V-color&gt;标题&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>如果使用setup语法糖，任何以”v”开头的驼峰式命名的变量都可以被用作一个自定义指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;span v-color&gt;&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"> const vColor =&#123;&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="全局自定义指令的声明与使用"><a href="#全局自定义指令的声明与使用" class="headerlink" title="全局自定义指令的声明与使用"></a>全局自定义指令的声明与使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">directive(&#x27;自定义指令名称&#x27;，对象)</span><br></pre></td></tr></table></figure><p>第1个参数类型为字符串，表示全局自定义指令的名称；<br>第2个参数类型为对象或者函数，可以是对象或者函数形式，用于接收指令的参数值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#x27;./style.css&#x27;</span><br><span class="line">import App from &#x27;./components/DirectiveComponent.vue&#x27;</span><br><span class="line"></span><br><span class="line">const app = createApp(App)</span><br><span class="line"></span><br><span class="line">app.directive(&#x27;fontsize&#x27;, &#123;</span><br><span class="line">mounted:el=&gt;&#123;</span><br><span class="line">  el.style.fontSize = &#x27;24px&#x27;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;p v-fontsize&gt;组件&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="为自定义指令绑定参数"><a href="#为自定义指令绑定参数" class="headerlink" title="为自定义指令绑定参数"></a>为自定义指令绑定参数</h2><p>在标签中使用自定义指令时，通过等号(&#x3D;)的方式可以为当前指令绑定参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 v-color=&quot;color&quot;&gt;&lt;/h1&gt;</span><br><span class="line">&lt;div v-demo=&quot;&#123;color:&#x27;red&#x27;,text:&#x27;hello&#x27;&#125;&quot;&gt;&lt;/div&gt;//如果指令需要多个值，可以传递一个对象</span><br></pre></td></tr></table></figure><h2 id="自定义指令的函数形式"><a href="#自定义指令的函数形式" class="headerlink" title="自定义指令的函数形式"></a>自定义指令的函数形式</h2><p>对于自定义指令来说，通常仅需要在mounted()函数和updated()函数中操作DOM元素，除此之外，不需要其他的生命周期函数。mounted()函数和updated()函数中的代码完全相同。此时，可以将自定义指令简写为函数形式。</p><p>将私有自定义指令简写为函数形式的示例代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const vFontSize =(el,binding)=&gt;&#123;</span><br><span class="line">  el.style.fontSize=binding.value</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>将全局自定义指令简写成函数形式的示例代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.directive(&#x27;fontSize&#x27;,(el,binding)=&gt;&#123;</span><br><span class="line"> el.style.fontSize=binding.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="引用静态资源"><a href="#引用静态资源" class="headerlink" title="引用静态资源"></a>引用静态资源</h2><p>引用public目录中的静态资源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;/demo.png&quot;&gt;</span><br></pre></td></tr></table></figure><p>引用src\assets目录中的静态资源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;img src=&#x27;icon&#x27;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import icon from &#x27;../assets/vue.svg&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">vue基础知识</summary>
    
    
    
    <category term="前端" scheme="https://huihui202411.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue" scheme="https://huihui202411.github.io/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>一天看完华为ict云赛道知识点</title>
    <link href="https://huihui202411.github.io/2025/01/20/Huawei_ICT/"/>
    <id>https://huihui202411.github.io/2025/01/20/Huawei_ICT/</id>
    <published>2025-01-20T10:00:00.000Z</published>
    <updated>2025-01-22T07:25:45.121Z</updated>
    
    <content type="html"><![CDATA[<p>本文为速成内容，针对临时备考的学生写的，展示的是部分知识点，如需系统学习，请关注作者，后续会更新~</p><span id="more"></span><h2 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h2><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a><strong>特点</strong>：</h3><ul><li>大规模</li><li>同质化</li><li>虚拟化</li><li>弹性计算</li><li>低成本软件</li><li>先进安全技术</li><li>地理分布</li><li>面向服务</li></ul><h3 id="部署模式："><a href="#部署模式：" class="headerlink" title="部署模式："></a><strong>部署模式</strong>：</h3><ul><li><p>私有云</p></li><li><p>公有云</p></li><li><p>混合云</p></li></ul><p>服务模式：</p><ul><li><strong>laaS 基础设施即服务</strong>（用户只需要关心基础设施和以上的东西，比如应用以及应用的运行环境）</li><li><strong>PaaS 平台即服务</strong>（应用运行环境）</li><li>弹性文件服务SFS属于PaaS（Platform as a Service，平台即服务）层服务，提供了分布式文件系统服务，用户无需关注底层存储和文件系统细节，即可快速搭建高性能、高可靠的文件服务</li><li><strong>SaaS 软件即服务</strong>（调用应用接口可以直接用，比如人脸识别，语音转译）</li></ul><img src="/2025/01/20/Huawei_ICT/1.png" class=""><h2 id="计算类技术"><a href="#计算类技术" class="headerlink" title="计算类技术"></a>计算类技术</h2><h3 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a><strong>虚拟化</strong></h3><p>虚拟化技术可将单台物理服务器虚拟为多台虚拟机使用，多台虚拟机共享该物理服务器的硬件资源。</p><p>虚拟机本质上是由<strong>磁盘文件</strong>和<strong>描述文件</strong>组成，封装在同一个文件夹中。虚拟化的本质就是将原先的物理设备进行<strong>逻辑化</strong>，转化成一个<strong>文件夹或文件</strong>，实现软硬件的解耦。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>分区（按规格大小来分配资源）、隔离（一个虚拟机受攻击不会影响其他的虚拟机）、封装（虚拟机以文件形式存在）、独立（硬件独立，没有绑定关系，软硬件解耦）</p><ul><li><strong>Guest OS:虚拟机操作系统</strong></li><li><strong>Guest Machine:虚拟出来的虚拟机</strong></li><li><strong>Hypervisor:虚拟化软件层&#x2F;虚拟机监视器</strong></li><li><strong>Host OS:运行在物理机之上的OS</strong></li><li><strong>Host Machine:物理机</strong></li></ul><img src="/2025/01/20/Huawei_ICT/2.png" class="">]]></content>
    
    
    <summary type="html">本文为速成内容，针对临时备考的学生写的，展示的是部分知识点，如需系统学习，请关注作者，后续会更新~</summary>
    
    
    
    <category term="华为ict" scheme="https://huihui202411.github.io/categories/%E5%8D%8E%E4%B8%BAict/"/>
    
    
  </entry>
  
</feed>
