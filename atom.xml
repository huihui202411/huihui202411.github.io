<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>huihui202411&#39;s blog</title>
  
  <subtitle>学习应该像呼吸一样自然</subtitle>
  <link href="https://huihui202411.github.io/atom.xml" rel="self"/>
  
  <link href="https://huihui202411.github.io/"/>
  <updated>2025-02-02T06:36:30.267Z</updated>
  <id>https://huihui202411.github.io/</id>
  
  <author>
    <name>huihui202411</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue基础知识</title>
    <link href="https://huihui202411.github.io/2025/01/22/Vue3/Vue3-1/"/>
    <id>https://huihui202411.github.io/2025/01/22/Vue3/Vue3-1/</id>
    <published>2025-01-22T06:44:00.000Z</published>
    <updated>2025-02-02T06:36:30.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识vue"><a href="#初识vue" class="headerlink" title="初识vue"></a>初识vue</h1><h2 id="创建vue3项目"><a href="#创建vue3项目" class="headerlink" title="创建vue3项目"></a>创建vue3项目</h2><span id="more"></span><h3 id="手动创建项目的命令"><a href="#手动创建项目的命令" class="headerlink" title="手动创建项目的命令"></a>手动创建项目的命令</h3><p>使用npm或者yarn包管理工具都可以搭配vite手动创建项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#使用npm create命令创建项目</span><br><span class="line">npm create vite@latest</span><br><span class="line">#使用yarn create命令创建项目</span><br><span class="line">yarn create vite</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><img src="/2025/01/22/Vue3/Vue3-1/1.png" class=""><p>创建之后可以在终端输入yarn安装项目的全部依赖</p><p>安装完之后输入 <font color="red">yarn dev </font>启动本地服务器</p><h3 id="通过模板自动创建项目"><a href="#通过模板自动创建项目" class="headerlink" title="通过模板自动创建项目"></a>通过模板自动创建项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#使用npm6或更低版本创建项目</span><br><span class="line">npm create vite@latest &lt;项目名称&gt; --template &lt;模板名称&gt;</span><br><span class="line">#使用npm7或更高版本创建项目</span><br><span class="line">npm create vite@latest &lt;项目名称&gt; -- --template &lt;模板名称&gt;</span><br><span class="line">#使用yarn create命令创建项目</span><br><span class="line">yarn create vite &lt;项目名称&gt; --template &lt;模板名称&gt;</span><br></pre></td></tr></table></figure><p><strong>示例</strong> </p><img src="/2025/01/22/Vue3/Vue3-1/2.png" class="" title="img"><h2 id="vue3目录结构"><a href="#vue3目录结构" class="headerlink" title="vue3目录结构"></a>vue3目录结构</h2><img src="/2025/01/22/Vue3/Vue3-1/mulu.png" class=""><p><strong>.vscode</strong> : 存放vscode编辑器的相关配置</p><p><strong>node_modules</strong>:存放通过npm或yarn安装的所有依赖包和插件</p><p><strong>public</strong>：存放的不可编译的静态资源文件，如图像、字体文件、favicon.ico等，使用绝对路径进行访问</p><p><strong>src</strong>：存放的开发者编写的源代码，，通常包括组件、样式、逻辑、API等</p><p><strong>assets</strong>：存放的可编译的静态资源文件，如图像、样式表、JavaScript文件等，使用相对路径进行访问</p><p><strong>components</strong>:存放单文件组件</p><p><strong>App.vue</strong>：项目的根组件，也是 Vue组件的入口文件，通常包含整个应用的主要框架结构</p><p><strong>main.js</strong>:项目的入口文件，通常会在这里创建Vue实例，并挂载到DOM上</p><p><strong>style.css</strong>:项目的全局样式文件</p><p>.<strong>gitignore</strong>:向git上传代码时需要忽略的文件列表</p><p><strong>index.html</strong>:默认的主渲染文件，项目的HTML模板，通常在这里包含项目的主要静态元素，并在<code>&lt;body&gt;</code>中挂载Vue应用</p><p><strong>package.json</strong>:项目的配置文件，定义了项目的基本信息、依赖、脚本等</p><p><strong>README</strong>:项目的使用说明文件</p><p><strong>vite.config.js</strong>:存放的vite的相关配置，比如插件、路径别名、开发服务器等</p><p><strong>yarn.lock</strong>: 用于确保每次安装依赖时都使用相同版本的锁文件。它由yarn管理，确保依赖的稳定性</p><h2 id="vue运行过程"><a href="#vue运行过程" class="headerlink" title="vue运行过程"></a>vue运行过程</h2><h3 id="创建vue实例"><a href="#创建vue实例" class="headerlink" title="创建vue实例"></a>创建vue实例</h3><blockquote><p>在 Vue 项目中，<code>main.js</code> 文件是整个应用的入口文件。在执行 <code>npm run dev</code> 命令时，Vite 或 Webpack 会从 <font color="skyblue"><strong>src&#x2F;main.js</strong></font> 开始加载应用。</p></blockquote><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>   <span class="comment">// 引入 Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span>               <span class="comment">// 引入全局样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>  <span class="comment">// 引入根组件</span></span><br><span class="line"><span class="comment">// 创建 Vue 实例并挂载到 #app 元素上</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="生成虚拟-DOM-和组件渲染"><a href="#生成虚拟-DOM-和组件渲染" class="headerlink" title="生成虚拟 DOM 和组件渲染"></a>生成虚拟 DOM 和组件渲染</h3><blockquote><p>在 Vue 3 中，组件的渲染分为结构、样式和交互三个部分。在 <code>App.vue</code> 中，我们通常看到三个部分：<code>&lt;template&gt;</code>、<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code>。</p></blockquote><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--交互--&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import HelloWorld from &#x27;./components/HelloWorld.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!--结构--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;a href=&quot;https://vite.dev&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">      &lt;img src=&quot;/vite.svg&quot; class=&quot;logo&quot; alt=&quot;Vite logo&quot; /&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;https://vuejs.org/&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">      &lt;img src=&quot;./assets/vue.svg&quot; class=&quot;logo vue&quot; alt=&quot;Vue logo&quot; /&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;HelloWorld msg=&quot;Vite + Vue&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;!--样式--&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.logo &#123;</span><br><span class="line">  height: 6em;</span><br><span class="line">  padding: 1.5em;</span><br><span class="line">  will-change: filter;</span><br><span class="line">  transition: filter 300ms;</span><br><span class="line">&#125;</span><br><span class="line">.logo:hover &#123;</span><br><span class="line">  filter: drop-shadow(0 0 2em #646cffaa);</span><br><span class="line">&#125;</span><br><span class="line">.logo.vue:hover &#123;</span><br><span class="line">  filter: drop-shadow(0 0 2em #42b883aa);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>交互</strong>：使用 <code>&lt;script setup&gt;</code> 语法，引入子组件 <code>HelloWorld.vue</code>。</p><p><strong>结构</strong>：模板部分，定义页面的 HTML 结构。</p><p><strong>样式</strong>：使用 <code>&lt;style scoped&gt;</code> 编写组件的样式。</p><p>当 <code>App.vue</code> 渲染时，它首先加载 <code>HelloWorld</code> 组件，并在模板中渲染该组件。Vue 会将模板转换成虚拟 DOM，并根据响应式数据的变化来更新视图。</p><h3 id="创建入口文件"><a href="#创建入口文件" class="headerlink" title="创建入口文件"></a>创建入口文件</h3><blockquote><p>index.html 是项目的首页，入口页，也是整个项目唯一的HTML页面</p></blockquote><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/svg+xml&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/vite.svg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vite + Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- Vue 会将应用挂载到这个元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/src/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="comment">&lt;!-- 引入入口文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个页面的 <code>#app</code> 元素将是 Vue 实例的挂载点。</p><p><code>script</code> 标签引入了 <code>main.js</code> 文件，这是整个 Vue 应用的入口。</p><h1 id="vue开发基础"><a href="#vue开发基础" class="headerlink" title="vue开发基础"></a>vue开发基础</h1><h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><p>每个单文件组件由模板、样式和逻辑3个部分构成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-此处编写组件的结构-&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">/*此处编写组件的逻辑*/</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">/休此处编写组件的样式*/</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="初始数据绑定"><a href="#初始数据绑定" class="headerlink" title="初始数据绑定"></a>初始数据绑定</h2><p>定义数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line"> setup()&#123;</span><br><span class="line"> return&#123;</span><br><span class="line">  数据名：数据值</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>使用setup语法糖来定义数据的语法格式如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const数据名=数据值</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当页面渲染时，模板中的会被替换为实际的数据</p><p>在Mustache语法中还可以将表达式的值作为输出内容。表达式的值可以是字符串、数字等类型，示例代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#x27;Hello Vue.js&#x27;&#125;&#125;</span><br><span class="line">&#123;&#123;number+1&#125;&#125;</span><br><span class="line">&#123;&#123;obj.name &#125;&#125;</span><br><span class="line">&#123;&#123;ok &#x27;YES&#x27;:&#x27;NO&#x27;&#125;&#125;</span><br><span class="line">&#123;&#123;&#x27;&lt;div&gt;HTML标签&lt;/div&gt;&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="数据绑定的实现"><a href="#数据绑定的实现" class="headerlink" title="数据绑定的实现"></a>数据绑定的实现</h3><p>创建src\components\Message.vue文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const message = &#x27;不积跬步无以至千里&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>更改main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Message.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="将vue引入HTML页面"><a href="#将vue引入HTML页面" class="headerlink" title="将vue引入HTML页面"></a>将vue引入HTML页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm=<span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">message</span>:<span class="string">&#x27;hello world&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">             &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            vm.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="响应式数据绑定"><a href="#响应式数据绑定" class="headerlink" title="响应式数据绑定"></a>响应式数据绑定</h2><p>vue为开发者提供了如下函数定义响应式数据</p><p><strong>ref()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &#123;&#123; Message &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const Message = ref(&#x27;Hello World&#x27;)</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    Message.value = &#x27;Hello Vue 3.0&#x27;</span><br><span class="line">&#125;, 2000)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>reactive()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &#123;&#123;obj.message&#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">const obj=reactive(&#123;message:&#x27;Hello World&#x27;&#125;)</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    obj.message = &#x27;Hello Vue 3.0&#x27;</span><br><span class="line">&#125;, 2000);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>toRef()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;message的值:&#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;obj.message的值:&#123;&#123;obj.message&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; reactive, toRef &#125; from &#x27;vue&#x27;</span><br><span class="line">const obj = reactive(&#123; message: &#x27;hello&#x27; &#125;)//创建一个响应式对象</span><br><span class="line">const message=toRef(obj,&#x27;message&#x27;) // 将响应式对象obj中的message属性转换为响应式引用</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    message.value = &#x27;world&#x27;</span><br><span class="line">&#125;, 2000)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>toRefs()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;message的值:&#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;obj.message的值:&#123;&#123;obj.message&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; reactive, toRefs &#125; from &#x27;vue&#x27;</span><br><span class="line">const obj = reactive(&#123; message: &#x27;hello&#x27;&#125;)</span><br><span class="line">let &#123;message&#125; = toRefs(obj)</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    message.value = &#x27;world&#x27;</span><br><span class="line">&#125;, 2000)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><font color="red"><strong>区别</strong></font></p><p>**使用 <code>reactive</code>**：当你需要处理 <strong>对象</strong> 或 <strong>数组</strong> 的响应式数据时，<code>reactive</code> 更自然，因为它能深度响应式地处理这些类型的数据，并且不需要 <code>.value</code> 访问对象的属性。</p><p>**使用 <code>ref</code>**：当你需要处理 <strong>基本类型</strong>（如字符串、数字、布尔值）时，<code>ref</code> 更适合，因为它是为这些类型专门设计的，能够轻松管理单一数据。</p><p>**使用 <code>toRef</code>**：当你想将 <strong>响应式对象</strong> 的某个属性转换为单独的响应式引用时，使用 <code>toRef</code>。它会返回一个新的响应式引用 <code>Ref</code>，你可以直接通过 <code>.value</code> 访问这个属性。</p><p>**使用 <code>toRefs</code>**：当你需要将 <strong>整个响应式对象</strong> 中的每个属性转换为响应式引用时，使用 <code>toRefs</code>。它返回一个新的对象，包含响应式对象中每个属性的 <code>ref</code> 引用。</p><h2 id="内容渲染指令"><a href="#内容渲染指令" class="headerlink" title="内容渲染指令"></a>内容渲染指令</h2><p>v-text用于渲染DOM元素的文本内容，如果文本内容中包含HTML标签，<font color="yellow"><strong>那么浏览器不会对其进行解析。</strong></font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-text=&quot;Message&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const Message = &#x27;&lt;span&gt;Hello World&lt;/span&gt;&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/vue3-1/shuchu1.png"></p><p>在使用Vue进行内容渲染时，如果内容中包含HTML标签并且希望<font color="yellow"><strong>这些标签被浏览器解析</strong></font>，则可以使用v-html。v-html用于渲染DOM元素的HTML内容，其用法与v-text相似。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-html=&quot;html&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const html = &#x27;&lt;strong&gt;Hello World&lt;/strong&gt;&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/vue3-1/shuchu2.png"></p><h2 id="属性绑定指令"><a href="#属性绑定指令" class="headerlink" title="属性绑定指令"></a>属性绑定指令</h2><p>在Vue开发中，有时需要绑定DOM元素的属性，从而更好地控制属性的值，此时可以使用属性绑定<font color="skyblue"><strong>指令v-bind</strong></font>来实现。</p><p>v-bind还支持将属性与字符串拼接表达式绑定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type=&quot;text&quot; v-bind:placeholder=&quot;username&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type=&quot;password&quot; :placeholder=&quot;password&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const username = ref(&#x27;请输入用户名&#x27;)</span><br><span class="line">const password = ref(&#x27;请输入密码&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="事件绑定指令"><a href="#事件绑定指令" class="headerlink" title="事件绑定指令"></a>事件绑定指令</h2><blockquote><p>在Vue开发中，有时需要给DOM元素绑定事件，从而利用事件实现交互效果，这时可以利用事件绑定<font color="skyblue"><strong>指令v-on</strong></font>来实现。</p><p>v-on还有简写形式，可以将”v-on:事件名”简写为<font color="skyblue"><strong>“@事件名”</strong></font></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">V-on:事件名</span>=<span class="string">&quot;事件处理器&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt; </span><br><span class="line">    &lt;button @click=&quot;showInfo&quot;&gt;输出信息&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const showInfo = () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;我是一个按钮&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="双向数据绑定指令"><a href="#双向数据绑定指令" class="headerlink" title="双向数据绑定指令"></a>双向数据绑定指令</h2><blockquote><p>Vue为开发者提供了<font color="skyblue"><strong>v-model指令</strong></font>来实现双向数据绑定，使用它可以在<font color="skyblue"><strong>input、textarea和select元素</strong></font>上创建双向数据绑定，它会根据使用的元素自动选取对应的属性和事件组合，负责监听用户的输入事件并更新数据。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;标签名 v-model=:&quot;数据名&quot;&gt;&lt;/标签名&gt;</span><br></pre></td></tr></table></figure><p>为了方便对用户输入的内容进行处理，v-model提供了3个修饰符。v-model的修饰符如下表所示:</p><p><img src="/vue3-1/xiushi.png"></p><p><strong>.number</strong> (如果不加.number默认是字符串类型)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    请输入姓名:&lt;input type=&quot;text&quot; v-model=&quot;username&quot;&gt;</span><br><span class="line">    &lt;div&gt;姓名是: &#123;&#123;username&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model.number=&quot;n1&quot;&gt;+&lt;input type=&quot;text&quot; v-model.number=&quot;n2&quot;&gt;=&#123;&#123;n1+n2&#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const username = ref(&#x27;zhangsan&#x27;)</span><br><span class="line">const n1 = ref(1)</span><br><span class="line">const n2 = ref(2)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h2><blockquote><p>在Vue中，当需要<font color="skyblue"><strong>根据不同的判断结果</strong></font>显示不同的DOM元素时，可以通过<font color="skyblue"><strong>条件渲染指令</strong></font>来实现。条件渲染指令可以辅助开发者按需控制DOM元素的显示与隐藏。</p></blockquote><p>条件渲染指令如下。</p><p><strong>v-if</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    小明的学习评定等级为:</span><br><span class="line">    &lt;p v-if=&quot;type === &#x27;A&#x27;&quot;&gt;优秀&lt;/p&gt;</span><br><span class="line">    &lt;p v-else-if=&quot;type === &#x27;B&#x27;&quot;&gt;良好&lt;/p&gt;</span><br><span class="line">    &lt;p v-else&gt;差&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;type =&#x27;A&#x27;&quot;&gt;切换成优秀&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;type =&#x27;B&#x27;&quot;&gt;切换成良好&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;type =&#x27;C&#x27;&quot;&gt;切换成差&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const type = ref(&#x27;B&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>v-show</strong></p><p>v-show的原理是通过为元素添加或移除display:none样式来实现元素的显示或隐藏。当需要频繁切换某个元素的显示或隐藏时，使用V-show会更节省性能开销；而当只需要切换一次显示或隐藏时，使用V-f更合理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p v-if=&quot;flag&quot;&gt;通过v-if控制的元素&lt;/p&gt;</span><br><span class="line">    &lt;p v-show=&quot;flag&quot;&gt;通过v-show控制的元素&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;flag = !flag&quot;&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const flag = ref(true)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="列表渲染指令"><a href="#列表渲染指令" class="headerlink" title="列表渲染指令"></a>列表渲染指令</h2><blockquote><p>Vue提供了列表渲染指令V-for。开发者只需在模板中定义一件商品的结构，V-for便会根据开发者提供的数据自动渲染商品列表中所有的商品</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-for=&quot;(item,index) in list&quot;:key=&quot;index&quot;&gt;</span><br><span class="line">        索引是:&#123;&#123;index&#125;&#125; ---元素的内容是:&#123;&#123;item&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">const list=reactive([&#x27;张三&#x27;,&#x27;李四&#x27;,&#x27;王五&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/vue3-1/vfor.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        id是: &#123;&#123; item.id &#125;&#125; --- 元素的内容是: &#123;&#123; item.message &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">const list = reactive([</span><br><span class="line">    &#123; id: 1, message: &#x27;hello&#x27; &#125;,</span><br><span class="line">    &#123; id: 2, message: &#x27;world&#x27; &#125;,</span><br><span class="line">    &#123; id: 3, message: &#x27;vue&#x27; &#125;,</span><br><span class="line">])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/vue3-1/vfor2.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-for=&quot;(value,name) in user&quot; :key=&quot;name&quot;&gt;</span><br><span class="line">        属性名是:&#123;&#123;name&#125;&#125; --- 属性值是:&#123;&#123;value&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">const user=reactive(&#123;</span><br><span class="line">    id:1,</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    gender:&#x27;男&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/vue3-1/vfor3.png"></p><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><h3 id="通过事件方法的参数获取事件对象"><a href="#通过事件方法的参数获取事件对象" class="headerlink" title="通过事件方法的参数获取事件对象"></a>通过事件方法的参数获取事件对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;count的值为:&#123;&#123; count &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;addCount&quot;&gt;count+1&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const count = ref(1)</span><br><span class="line">const addCount = event =&gt; &#123;</span><br><span class="line">    count.value++</span><br><span class="line">    if(count.value%2 === 0)&#123;</span><br><span class="line">       event.target.style.border=&quot;3px dotted&quot;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        event.target.style.border=&quot;3px solid&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/vue3-1/event.png"></p><h3 id="通过-event获取事件对象"><a href="#通过-event获取事件对象" class="headerlink" title="通过$event获取事件对象"></a>通过$event获取事件对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;count的值为:&#123;&#123; count &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;addCount&quot;&gt;count+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;addCountN(3,$event)&quot;&gt;count+n&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const count = ref(1)</span><br><span class="line">const addCount = event =&gt; &#123;</span><br><span class="line">    count.value++</span><br><span class="line">    if(count.value%2 === 0)&#123;</span><br><span class="line">       event.target.style.border=&quot;3px dotted&quot;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        event.target.style.border=&quot;3px solid&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">const addCountN =(n,event)=&gt;&#123;</span><br><span class="line">    count.value+=n</span><br><span class="line">    if(count.value%2 === 0)&#123;</span><br><span class="line">       event.target.style.border=&quot;3px dotted&quot;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        event.target.style.border=&quot;3px solid&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/vue3-1/event2.png"></p><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><p>阻止默认事件行为 </p><p>.prevent</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;test.html&quot; v-on:click.prevent&gt;阻止默认跳转行为&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>阻止事件冒泡</p><p>.stop</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-on:click =&quot;show(&#x27;我是父元素的事件&#x27;)&quot;&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;show(&#x27;我是子元素的事件&#x27;)&quot;&gt;事件冒泡&lt;/button&gt;</span><br><span class="line">    &lt;button v-on:click.stop=&quot;show(&#x27;我是子元素的事件&#x27;)&quot;&gt;阻止事件冒泡&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">let show=message =&gt;console.log(message)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>事件捕获</p>]]></content>
    
    
    <summary type="html">vue基础知识</summary>
    
    
    
    <category term="前端" scheme="https://huihui202411.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue" scheme="https://huihui202411.github.io/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>一天看完华为ict云赛道知识点</title>
    <link href="https://huihui202411.github.io/2025/01/20/Huawei_ICT/"/>
    <id>https://huihui202411.github.io/2025/01/20/Huawei_ICT/</id>
    <published>2025-01-20T10:00:00.000Z</published>
    <updated>2025-01-22T07:25:45.121Z</updated>
    
    <content type="html"><![CDATA[<p>本文为速成内容，针对临时备考的学生写的，展示的是部分知识点，如需系统学习，请关注作者，后续会更新~</p><span id="more"></span><h2 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h2><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a><strong>特点</strong>：</h3><ul><li>大规模</li><li>同质化</li><li>虚拟化</li><li>弹性计算</li><li>低成本软件</li><li>先进安全技术</li><li>地理分布</li><li>面向服务</li></ul><h3 id="部署模式："><a href="#部署模式：" class="headerlink" title="部署模式："></a><strong>部署模式</strong>：</h3><ul><li><p>私有云</p></li><li><p>公有云</p></li><li><p>混合云</p></li></ul><p>服务模式：</p><ul><li><strong>laaS 基础设施即服务</strong>（用户只需要关心基础设施和以上的东西，比如应用以及应用的运行环境）</li><li><strong>PaaS 平台即服务</strong>（应用运行环境）</li><li>弹性文件服务SFS属于PaaS（Platform as a Service，平台即服务）层服务，提供了分布式文件系统服务，用户无需关注底层存储和文件系统细节，即可快速搭建高性能、高可靠的文件服务</li><li><strong>SaaS 软件即服务</strong>（调用应用接口可以直接用，比如人脸识别，语音转译）</li></ul><img src="/2025/01/20/Huawei_ICT/1.png" class=""><h2 id="计算类技术"><a href="#计算类技术" class="headerlink" title="计算类技术"></a>计算类技术</h2><h3 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a><strong>虚拟化</strong></h3><p>虚拟化技术可将单台物理服务器虚拟为多台虚拟机使用，多台虚拟机共享该物理服务器的硬件资源。</p><p>虚拟机本质上是由<strong>磁盘文件</strong>和<strong>描述文件</strong>组成，封装在同一个文件夹中。虚拟化的本质就是将原先的物理设备进行<strong>逻辑化</strong>，转化成一个<strong>文件夹或文件</strong>，实现软硬件的解耦。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>分区（按规格大小来分配资源）、隔离（一个虚拟机受攻击不会影响其他的虚拟机）、封装（虚拟机以文件形式存在）、独立（硬件独立，没有绑定关系，软硬件解耦）</p><ul><li><strong>Guest OS:虚拟机操作系统</strong></li><li><strong>Guest Machine:虚拟出来的虚拟机</strong></li><li><strong>Hypervisor:虚拟化软件层&#x2F;虚拟机监视器</strong></li><li><strong>Host OS:运行在物理机之上的OS</strong></li><li><strong>Host Machine:物理机</strong></li></ul><img src="/2025/01/20/Huawei_ICT/2.png" class="">]]></content>
    
    
    <summary type="html">本文为速成内容，针对临时备考的学生写的，展示的是部分知识点，如需系统学习，请关注作者，后续会更新~</summary>
    
    
    
    <category term="华为ict" scheme="https://huihui202411.github.io/categories/%E5%8D%8E%E4%B8%BAict/"/>
    
    
  </entry>
  
</feed>
